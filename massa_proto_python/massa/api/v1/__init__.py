# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: private.proto, public.proto
# plugin: python-betterproto
# This file has been @generated
import builtins
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    AsyncIterable,
    AsyncIterator,
    Dict,
    Iterable,
    List,
    Optional,
    Union,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...model import v1 as __model_v1__


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class ExecutionQueryExecutionStatus(betterproto.Enum):
    """Execution status of an operation or denunciation"""

    EXECUTION_QUERY_EXECUTION_STATUS_UNSPECIFIED = 0
    EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_SUCCESS = 1
    EXECUTION_QUERY_EXECUTION_STATUS_ALREADY_EXECUTED_WITH_FAILURE = 2
    EXECUTION_QUERY_EXECUTION_STATUS_EXECUTABLE_OR_EXPIRED = 3


@dataclass(eq=False, repr=False)
class ExecuteReadOnlyCallRequest(betterproto.Message):
    """ExecuteReadOnlyCallRequest holds request for ExecuteReadOnlyCall"""

    call: "__model_v1__.ReadOnlyExecutionCall" = betterproto.message_field(1)
    """Execution call"""


@dataclass(eq=False, repr=False)
class ExecuteReadOnlyCallResponse(betterproto.Message):
    """ExecuteReadOnlyCallResponse holds response from ExecuteReadOnlyCall"""

    output: "__model_v1__.ReadOnlyExecutionOutput" = betterproto.message_field(1)
    """Execution output"""


@dataclass(eq=False, repr=False)
class GetBlocksRequest(betterproto.Message):
    """GetBlocksRequest holds request for GetBlocks"""

    block_ids: List[str] = betterproto.string_field(1)
    """Block ids"""


@dataclass(eq=False, repr=False)
class GetBlocksResponse(betterproto.Message):
    """GetBlocksResponse holds response from GetBlocks"""

    wrapped_blocks: List["__model_v1__.BlockWrapper"] = betterproto.message_field(1)
    """Wrapped blocks"""


@dataclass(eq=False, repr=False)
class GetDatastoreEntriesRequest(betterproto.Message):
    """GetDatastoreEntriesRequest holds request from GetDatastoreEntries"""

    filters: List["GetDatastoreEntryFilter"] = betterproto.message_field(1)
    """Returns all the datastore entries that verify all the filters"""


@dataclass(eq=False, repr=False)
class GetDatastoreEntryFilter(betterproto.Message):
    """DatastoreEntryFilter"""

    address_key: "__model_v1__.AddressKeyEntry" = betterproto.message_field(
        1, group="filter"
    )
    """One of these (address-key) pairs"""


@dataclass(eq=False, repr=False)
class GetDatastoreEntriesResponse(betterproto.Message):
    """GetDatastoreEntriesResponse holds response from GetDatastoreEntries"""

    datastore_entries: List["__model_v1__.DatastoreEntry"] = betterproto.message_field(
        1
    )
    """Datastore entries"""


@dataclass(eq=False, repr=False)
class GetEndorsementsRequest(betterproto.Message):
    """GetEndorsementsRequest holds request for GetEndorsements"""

    endorsement_ids: List[str] = betterproto.string_field(1)
    """Endorsement ids"""


@dataclass(eq=False, repr=False)
class GetEndorsementsResponse(betterproto.Message):
    """GetEndorsementsResponse holds response from GetEndorsements"""

    wrapped_endorsements: List[
        "__model_v1__.EndorsementWrapper"
    ] = betterproto.message_field(1)
    """Wrapped operations"""


@dataclass(eq=False, repr=False)
class GetNextBlockBestParentsRequest(betterproto.Message):
    """
    GetNextBlockBestParentsRequest holds request for GetNextBlockBestParents
    """

    pass


@dataclass(eq=False, repr=False)
class GetNextBlockBestParentsResponse(betterproto.Message):
    """
    GetNextBlockBestParentsResponse holds response from GetNextBlockBestParents
    """

    block_parents: List["__model_v1__.BlockParent"] = betterproto.message_field(1)
    """Next block best parents"""


@dataclass(eq=False, repr=False)
class GetOperationsRequest(betterproto.Message):
    """GetOperationsRequest holds request for GetOperations"""

    operation_ids: List[str] = betterproto.string_field(1)
    """Operation ids"""


@dataclass(eq=False, repr=False)
class GetOperationsResponse(betterproto.Message):
    """GetOperationsResponse holds response from GetOperations"""

    wrapped_operations: List[
        "__model_v1__.OperationWrapper"
    ] = betterproto.message_field(1)
    """Wrapped operations"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsRequest(betterproto.Message):
    """GetScExecutionEventsRequest holds request for GetScExecutionEvents"""

    filters: List["ScExecutionEventsFilter"] = betterproto.message_field(1)
    """Returns all the sc execution events that verify all the filters"""


@dataclass(eq=False, repr=False)
class ScExecutionEventsFilter(betterproto.Message):
    """ScExecutionEvents Filter"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(1, group="filter")
    """Slot range"""

    caller_address: str = betterproto.string_field(2, group="filter")
    """Caller address"""

    emitter_address: str = betterproto.string_field(3, group="filter")
    """Emitter address"""

    original_operation_id: str = betterproto.string_field(4, group="filter")
    """Original operation id"""

    is_failure: bool = betterproto.bool_field(5, group="filter")
    """Whether the event is a failure"""

    status: "__model_v1__.ScExecutionEventStatus" = betterproto.enum_field(
        6, group="filter"
    )
    """Status"""


@dataclass(eq=False, repr=False)
class GetScExecutionEventsResponse(betterproto.Message):
    """
    GetScExecutionEventsResponse holds response from GetScExecutionEvents
    """

    events: List["__model_v1__.ScExecutionEvent"] = betterproto.message_field(1)
    """ScExecutionEvents"""


@dataclass(eq=False, repr=False)
class GetStatusRequest(betterproto.Message):
    """GetStatusRequest holds request from GetStatus"""

    pass


@dataclass(eq=False, repr=False)
class GetStatusResponse(betterproto.Message):
    """GetStatusResponse holds request from GetStatus"""

    status: "__model_v1__.PublicStatus" = betterproto.message_field(1)
    """Status"""


@dataclass(eq=False, repr=False)
class GetSelectorDrawsRequest(betterproto.Message):
    """GetSelectorDrawsRequest holds request from GetSelectorDraws"""

    filters: List["SelectorDrawsFilter"] = betterproto.message_field(1)
    """Returns all the selector draws that verify all the filters"""


@dataclass(eq=False, repr=False)
class SelectorDrawsFilter(betterproto.Message):
    """SelectorDraws Filter"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(1, group="filter")
    """One of the Addresses"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(2, group="filter")
    """One of the Slot range"""


@dataclass(eq=False, repr=False)
class GetSelectorDrawsResponse(betterproto.Message):
    """GetSelectorDrawsResponse holds response from GetSelectorDraws"""

    draws: List["__model_v1__.SlotDraw"] = betterproto.message_field(1)
    """Selector draws"""


@dataclass(eq=False, repr=False)
class GetStakersRequest(betterproto.Message):
    """GetStakersRequest holds request from GetStakers"""

    filters: List["StakersFilter"] = betterproto.message_field(1)
    """Returns all the stakers that verify all the filters"""


@dataclass(eq=False, repr=False)
class StakersFilter(betterproto.Message):
    """Stakers Filter"""

    min_rolls: int = betterproto.uint64_field(1, group="filter")
    """Minimum rolls"""

    max_rolls: int = betterproto.uint64_field(2, group="filter")
    """Maximum rolls"""

    limit: int = betterproto.uint64_field(3, group="filter")
    """Limit"""


@dataclass(eq=False, repr=False)
class GetStakersResponse(betterproto.Message):
    """GetStakersResponse holds response from GetStakers"""

    stakers: List["__model_v1__.StakerEntry"] = betterproto.message_field(1)
    """Stakers"""


@dataclass(eq=False, repr=False)
class GetTransactionsThroughputRequest(betterproto.Message):
    """
    GetTransactionsThroughputRequest holds request for
    GetTransactionsThroughput
    """

    pass


@dataclass(eq=False, repr=False)
class GetTransactionsThroughputResponse(betterproto.Message):
    """
    GetTransactionsThroughputResponse holds response from
    GetTransactionsThroughput
    """

    throughput: int = betterproto.uint32_field(1)
    """Transactions throughput"""


@dataclass(eq=False, repr=False)
class QueryStateRequest(betterproto.Message):
    """Request to atomically execute a batch of execution state queries"""

    queries: List["ExecutionQueryRequestItem"] = betterproto.message_field(1)
    """Execution queries"""


@dataclass(eq=False, repr=False)
class ExecutionQueryRequestItem(betterproto.Message):
    """Query state query item"""

    address_exists_candidate: "AddressExistsCandidate" = betterproto.message_field(
        1, group="request_item"
    )
    """Checks if address exists (candidate)"""

    address_exists_final: "AddressExistsFinal" = betterproto.message_field(
        2, group="request_item"
    )
    """Checks if address exists (final)"""

    address_balance_candidate: "AddressBalanceCandidate" = betterproto.message_field(
        3, group="request_item"
    )
    """Gets the balance (candidate) of an address"""

    address_balance_final: "AddressBalanceFinal" = betterproto.message_field(
        4, group="request_item"
    )
    """Gets the balance (final) of an address"""

    address_bytecode_candidate: "AddressBytecodeCandidate" = betterproto.message_field(
        5, group="request_item"
    )
    """Gets the bytecode (candidate) of an address"""

    address_bytecode_final: "AddressBytecodeFinal" = betterproto.message_field(
        6, group="request_item"
    )
    """Gets the bytecode (final) of an address"""

    address_datastore_keys_candidate: "AddressDatastoreKeysCandidate" = (
        betterproto.message_field(7, group="request_item")
    )
    """Gets the datastore keys (candidate) of an address"""

    address_datastore_keys_final: "AddressDatastoreKeysFinal" = (
        betterproto.message_field(8, group="request_item")
    )
    """Gets the datastore keys (final) of an address"""

    address_datastore_value_candidate: "AddressDatastoreValueCandidate" = (
        betterproto.message_field(9, group="request_item")
    )
    """Gets a datastore value (candidate) for an address"""

    address_datastore_value_final: "AddressDatastoreValueFinal" = (
        betterproto.message_field(10, group="request_item")
    )
    """Gets a datastore value (final) for an address"""

    op_execution_status_candidate: "OpExecutionStatusCandidate" = (
        betterproto.message_field(11, group="request_item")
    )
    """Gets the execution status (candidate) for an operation"""

    op_execution_status_final: "OpExecutionStatusFinal" = betterproto.message_field(
        12, group="request_item"
    )
    """Gets the execution status (final) for an operation"""

    denunciation_execution_status_candidate: "DenunciationExecutionStatusCandidate" = (
        betterproto.message_field(13, group="request_item")
    )
    """Gets the execution status (candidate) for a denunciation"""

    denunciation_execution_status_final: "DenunciationExecutionStatusFinal" = (
        betterproto.message_field(14, group="request_item")
    )
    """Gets the execution status (final) for a denunciation"""

    address_rolls_candidate: "AddressRollsCandidate" = betterproto.message_field(
        15, group="request_item"
    )
    """Gets the roll count (candidate) of an address"""

    address_rolls_final: "AddressRollsFinal" = betterproto.message_field(
        16, group="request_item"
    )
    """Gets the roll count (final) of an address"""

    address_deferred_credits_candidate: "AddressDeferredCreditsCandidate" = (
        betterproto.message_field(17, group="request_item")
    )
    """Gets the deferred credits (candidate) of an address"""

    address_deferred_credits_final: "AddressDeferredCreditsFinal" = (
        betterproto.message_field(18, group="request_item")
    )
    """Gets the deferred credits (final) of an address"""

    cycle_infos: "CycleInfos" = betterproto.message_field(19, group="request_item")
    """Gets all information for a given cycle"""

    events: "Events" = betterproto.message_field(20, group="request_item")
    """Gets filtered events"""


@dataclass(eq=False, repr=False)
class AddressExistsCandidate(betterproto.Message):
    """Request to check if address exists (candidate)"""

    address: str = betterproto.string_field(1)
    """Address to check"""


@dataclass(eq=False, repr=False)
class AddressExistsFinal(betterproto.Message):
    """Request to check if address exists (final)"""

    address: str = betterproto.string_field(1)
    """Address to check"""


@dataclass(eq=False, repr=False)
class AddressBalanceCandidate(betterproto.Message):
    """Request to get the balance (candidate) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressBalanceFinal(betterproto.Message):
    """Request to get the balance (final) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressBytecodeCandidate(betterproto.Message):
    """Request to get the bytecode (candidate) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressBytecodeFinal(betterproto.Message):
    """Request to get the bytecode (final) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressDatastoreKeysCandidate(betterproto.Message):
    """Request to get the datastore keys (candidate) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""

    prefix: bytes = betterproto.bytes_field(2)
    """Prefix for the keys"""


@dataclass(eq=False, repr=False)
class AddressDatastoreKeysFinal(betterproto.Message):
    """Request to get the datastore keys (final) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""

    prefix: bytes = betterproto.bytes_field(2)
    """Prefix for the keys"""


@dataclass(eq=False, repr=False)
class AddressDatastoreValueCandidate(betterproto.Message):
    """Request to get a datastore value (candidate) for an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""

    key: bytes = betterproto.bytes_field(2)
    """Key for the value"""


@dataclass(eq=False, repr=False)
class AddressDatastoreValueFinal(betterproto.Message):
    """Request to get a datastore value (final) for an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""

    key: bytes = betterproto.bytes_field(2)
    """Key for the value"""


@dataclass(eq=False, repr=False)
class OpExecutionStatusCandidate(betterproto.Message):
    """Request to get the execution status (candidate) for an operation"""

    operation_id: str = betterproto.string_field(1)
    """Operation ID to query"""


@dataclass(eq=False, repr=False)
class OpExecutionStatusFinal(betterproto.Message):
    """Request to get the execution status (final) for an operation"""

    operation_id: str = betterproto.string_field(1)
    """Operation ID to query"""


@dataclass(eq=False, repr=False)
class DenunciationExecutionStatusCandidate(betterproto.Message):
    """Request to get the execution status (candidate) for a denunciation"""

    denunciation_index: "__model_v1__.DenunciationIndex" = betterproto.message_field(1)
    """Denunciation index to query"""


@dataclass(eq=False, repr=False)
class DenunciationExecutionStatusFinal(betterproto.Message):
    """Request to get the execution status (final) for a denunciation"""

    denunciation_index: "__model_v1__.DenunciationIndex" = betterproto.message_field(1)
    """Denunciation index to query"""


@dataclass(eq=False, repr=False)
class AddressRollsCandidate(betterproto.Message):
    """Request to get the roll count (candidate) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressRollsFinal(betterproto.Message):
    """Request to get the roll count (final) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressDeferredCreditsCandidate(betterproto.Message):
    """Request to get the deferred credits (candidate) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class AddressDeferredCreditsFinal(betterproto.Message):
    """Request to get the deferred credits (final) of an address"""

    address: str = betterproto.string_field(1)
    """Address to query"""


@dataclass(eq=False, repr=False)
class CycleInfos(betterproto.Message):
    """Request to get all information for a given cycle"""

    cycle: int = betterproto.uint64_field(1)
    """Cycle to query"""

    restrict_to_addresses: List[str] = betterproto.string_field(2)
    """
    Addresses to restrict the query (if None, info for all addresses will be
    returned)
    """


@dataclass(eq=False, repr=False)
class Events(betterproto.Message):
    """Request to get filtered events"""

    filters: List["ScExecutionEventsFilter"] = betterproto.message_field(1)
    """Returns all the events that verify all the filters"""


@dataclass(eq=False, repr=False)
class QueryStateResponse(betterproto.Message):
    """Response to atomically execute a batch of execution state queries"""

    final_cursor: "__model_v1__.Slot" = betterproto.message_field(1)
    """Final cursor position"""

    candidate_cursor: "__model_v1__.Slot" = betterproto.message_field(2)
    """Candidate cursor position"""

    final_state_fingerprint: str = betterproto.string_field(3)
    """The hash of the XOF final state hash"""

    responses: List["ExecutionQueryResponse"] = betterproto.message_field(4)
    """List of execution query response items"""


@dataclass(eq=False, repr=False)
class ExecutionQueryResponse(betterproto.Message):
    """Execution state query response"""

    result: "ExecutionQueryResponseItem" = betterproto.message_field(
        1, group="response"
    )
    """Execution query response item"""

    error: "__model_v1__.Error" = betterproto.message_field(2, group="response")
    """Massa error"""


@dataclass(eq=False, repr=False)
class ExecutionQueryResponseItem(betterproto.Message):
    """Execution state query response item"""

    boolean: bool = betterproto.bool_field(1, group="response_item")
    """Boolean value"""

    roll_count: int = betterproto.uint64_field(2, group="response_item")
    """Roll counts value"""

    amount: "__model_v1__.NativeAmount" = betterproto.message_field(
        3, group="response_item"
    )
    """Amount value"""

    bytes: builtins.bytes = betterproto.bytes_field(4, group="response_item")
    """Bytes value"""

    vec_bytes: "__model_v1__.ArrayOfBytesWrapper" = betterproto.message_field(
        5, group="response_item"
    )
    """Vector of bytes value"""

    deferred_credits: "DeferredCreditsEntryWrapper" = betterproto.message_field(
        6, group="response_item"
    )
    """Deferred credits value"""

    execution_status: "ExecutionQueryExecutionStatus" = betterproto.enum_field(
        7, group="response_item"
    )
    """Execution status value"""

    cycle_infos: "ExecutionQueryCycleInfos" = betterproto.message_field(
        8, group="response_item"
    )
    """Cycle infos value"""

    events: "ScOutputEventsWrapper" = betterproto.message_field(
        9, group="response_item"
    )
    """Events"""


@dataclass(eq=False, repr=False)
class DeferredCreditsEntryWrapper(betterproto.Message):
    """Deferred credits entry wrapper"""

    entries: List["DeferredCreditsEntry"] = betterproto.message_field(1)
    """Deferred credits entry"""


@dataclass(eq=False, repr=False)
class DeferredCreditsEntry(betterproto.Message):
    """Deferred credits entry"""

    slot: "__model_v1__.Slot" = betterproto.message_field(1)
    """Slot"""

    amount: "__model_v1__.NativeAmount" = betterproto.message_field(2)
    """Amount"""


@dataclass(eq=False, repr=False)
class ExecutionQueryCycleInfos(betterproto.Message):
    """Cycle information for execution query"""

    cycle: int = betterproto.uint64_field(1)
    """Cycle number"""

    is_final: bool = betterproto.bool_field(2)
    """Whether the cycle is final"""

    staker_infos: List["ExecutionQueryStakerInfoEntry"] = betterproto.message_field(3)
    """
    Infos for each PoS-participating address among the ones that were asked
    """


@dataclass(eq=False, repr=False)
class ExecutionQueryStakerInfoEntry(betterproto.Message):
    """Staker information for a given cycle"""

    address: str = betterproto.string_field(1)
    """Address of the staker"""

    info: "ExecutionQueryStakerInfo" = betterproto.message_field(2)
    """Staker info"""


@dataclass(eq=False, repr=False)
class ExecutionQueryStakerInfo(betterproto.Message):
    """Staker information for execution query"""

    active_rolls: int = betterproto.uint64_field(1)
    """Active roll count"""

    production_stats: "ExecutionQueryStakerInfoProductionStatsEntry" = (
        betterproto.message_field(2)
    )
    """Production stats"""


@dataclass(eq=False, repr=False)
class ExecutionQueryStakerInfoProductionStatsEntry(betterproto.Message):
    """ExecutionQueryStakerInfoProductionStats entry"""

    address: str = betterproto.string_field(1)
    """Address of the staker"""

    stats: "ExecutionQueryStakerInfoProductionStats" = betterproto.message_field(2)
    """Production failure"""


@dataclass(eq=False, repr=False)
class ExecutionQueryStakerInfoProductionStats(betterproto.Message):
    """Production statistics for staker info in execution query"""

    block_success_count: int = betterproto.uint64_field(1)
    """Production successes"""

    block_failure_count: int = betterproto.uint64_field(2)
    """Production failures"""


@dataclass(eq=False, repr=False)
class ScOutputEventsWrapper(betterproto.Message):
    """ScOutputEvents wrapper"""

    events: List["__model_v1__.ScExecutionEvent"] = betterproto.message_field(1)
    """Events"""


@dataclass(eq=False, repr=False)
class NewBlocksRequest(betterproto.Message):
    """NewBlocksRequest holds request for NewBlocks"""

    filters: List["NewBlocksFilter"] = betterproto.message_field(1)
    """Returns all the blocks that verify all the filters"""


@dataclass(eq=False, repr=False)
class NewBlocksFilter(betterproto.Message):
    """NewBlocks Filter"""

    block_ids: "__model_v1__.BlockIds" = betterproto.message_field(1, group="filter")
    """One of these block ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(3, group="filter")
    """One of these slot ranges (inclusive)"""


@dataclass(eq=False, repr=False)
class NewBlocksResponse(betterproto.Message):
    """NewBlocksResponse holds response from NewBlocks"""

    signed_block: "__model_v1__.SignedBlock" = betterproto.message_field(1)
    """Signed block"""


@dataclass(eq=False, repr=False)
class NewEndorsementsRequest(betterproto.Message):
    """NewEndorsementsRequest holds request for NewEndorsements"""

    filters: List["NewEndorsementsFilter"] = betterproto.message_field(1)
    """Returns all the endorsements that verify all the filters"""


@dataclass(eq=False, repr=False)
class NewEndorsementsFilter(betterproto.Message):
    """NewEndorsements Filter"""

    endorsement_ids: "__model_v1__.EndorsementIds" = betterproto.message_field(
        1, group="filter"
    )
    """One of these endorsement ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    block_ids: "__model_v1__.BlockIds" = betterproto.message_field(3, group="filter")
    """One of these block ids"""


@dataclass(eq=False, repr=False)
class NewEndorsementsResponse(betterproto.Message):
    """NewEndorsementsResponse holds response from NewEndorsements"""

    signed_endorsement: "__model_v1__.SignedEndorsement" = betterproto.message_field(1)
    """Signed endorsement"""


@dataclass(eq=False, repr=False)
class NewFilledBlocksRequest(betterproto.Message):
    """NewFilledBlocksRequest holds request for NewFilledBlocks"""

    filters: List["NewBlocksFilter"] = betterproto.message_field(1)
    """Returns all the blocks that verify one of the filters"""


@dataclass(eq=False, repr=False)
class NewFilledBlocksFilter(betterproto.Message):
    """NewFilledBlocks Filter"""

    block_ids: "__model_v1__.BlockIds" = betterproto.message_field(1, group="filter")
    """One of these block ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(3, group="filter")
    """One of these slot ranges (inclusive)"""


@dataclass(eq=False, repr=False)
class NewFilledBlocksResponse(betterproto.Message):
    """NewFilledBlocksResponse holds response from NewFilledBlocks"""

    filled_block: "__model_v1__.FilledBlock" = betterproto.message_field(1)
    """Block with operations content found in the node."""


@dataclass(eq=False, repr=False)
class NewOperationsRequest(betterproto.Message):
    """NewOperationsRequest holds request for NewOperations"""

    filters: List["NewOperationsFilter"] = betterproto.message_field(1)
    """Returns all the operations that verify all the filters"""


@dataclass(eq=False, repr=False)
class NewOperationsFilter(betterproto.Message):
    """NewOperations Filter"""

    operation_ids: "__model_v1__.OperationIds" = betterproto.message_field(
        1, group="filter"
    )
    """One of the operation ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    operation_types: "__model_v1__.OpTypes" = betterproto.message_field(
        3, group="filter"
    )
    """One of the operation types"""


@dataclass(eq=False, repr=False)
class NewOperationsResponse(betterproto.Message):
    """NewOperationsResponse holds response from NewOperations"""

    signed_operation: "__model_v1__.SignedOperation" = betterproto.message_field(1)
    """Signed operation"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsRequest(betterproto.Message):
    """
    NewSlotExecutionOutputsRequest holds request for NewSlotExecutionOutputs
    """

    filters: List["NewSlotExecutionOutputsFilter"] = betterproto.message_field(1)
    """Returns all the slot execution outputs that verify all the filters"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsFilter(betterproto.Message):
    """NewSlotExecutionOutputs Filter"""

    status: "__model_v1__.ExecutionOutputStatus" = betterproto.enum_field(
        1, group="filter"
    )
    """Execution output status"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(2, group="filter")
    """Slot range"""

    async_pool_changes_filter: "AsyncPoolChangesFilter" = betterproto.message_field(
        3, group="filter"
    )
    """AsyncPoolChangesFilter"""

    executed_denounciation_filter: "ExecutedDenounciationFilter" = (
        betterproto.message_field(4, group="filter")
    )
    """ExecutedDenounciationFilter"""

    event_filter: "ExecutionEventFilter" = betterproto.message_field(5, group="filter")
    """Execution event filter"""

    executed_ops_changes_filter: "ExecutedOpsChangesFilter" = betterproto.message_field(
        6, group="filter"
    )
    """ExecutedOpsChangesFilter"""

    ledger_changes_filter: "LedgerChangesFilter" = betterproto.message_field(
        7, group="filter"
    )
    """LedgerChangesFilter"""


@dataclass(eq=False, repr=False)
class AsyncPoolChangesFilter(betterproto.Message):
    """AsyncPoolChangesFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""

    type: "__model_v1__.AsyncPoolChangeType" = betterproto.enum_field(2, group="filter")
    """The type of the change"""

    handler: str = betterproto.string_field(3, group="filter")
    """The handler function name within the destination address bytecode"""

    destination_address: str = betterproto.string_field(4, group="filter")
    """The address towards which the message is being sent"""

    emitter_address: str = betterproto.string_field(5, group="filter")
    """The address that sent the message"""

    can_be_executed: bool = betterproto.bool_field(6, group="filter")
    """
    Boolean that determine if the message can be executed. For messages without
    filter this boolean is always true. For messages with filter, this boolean
    is true if the filter has been matched between `validity_start` and current
    slot.
    """


@dataclass(eq=False, repr=False)
class PosChangesFilter(betterproto.Message):
    """PosChangesFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""

    address: str = betterproto.string_field(2, group="filter")
    """Address for which we have roll changes"""


@dataclass(eq=False, repr=False)
class ExecutionEventFilter(betterproto.Message):
    """ExecutionEventFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""

    caller_address: str = betterproto.string_field(2, group="filter")
    """Caller address"""

    emitter_address: str = betterproto.string_field(3, group="filter")
    """Emitter address"""

    original_operation_id: str = betterproto.string_field(4, group="filter")
    """Original operation id"""

    is_failure: bool = betterproto.bool_field(5, group="filter")
    """Whether the event is a failure"""


@dataclass(eq=False, repr=False)
class ExecutedOpsChangesFilter(betterproto.Message):
    """ExecutedOpsChangesFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""

    operation_id: str = betterproto.string_field(2, group="filter")
    """Operation id"""


@dataclass(eq=False, repr=False)
class ExecutedDenounciationFilter(betterproto.Message):
    """ExecutedDenounciationFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""


@dataclass(eq=False, repr=False)
class LedgerChangesFilter(betterproto.Message):
    """LedgerChangesFilter"""

    none: "__model_v1__.Empty" = betterproto.message_field(1, group="filter")
    """Do not return any message"""

    address: str = betterproto.string_field(2, group="filter")
    """Address for which we have ledger changes"""


@dataclass(eq=False, repr=False)
class NewSlotExecutionOutputsResponse(betterproto.Message):
    """
    NewSlotExecutionOutputsResponse holds response from NewSlotExecutionOutputs
    """

    output: "__model_v1__.SlotExecutionOutput" = betterproto.message_field(1)
    """Slot execution output"""


@dataclass(eq=False, repr=False)
class SendBlocksRequest(betterproto.Message):
    """SendBlocksRequest holds parameters to SendBlocks"""

    block: bytes = betterproto.bytes_field(1)
    """Secure shared block"""


@dataclass(eq=False, repr=False)
class SendBlocksResponse(betterproto.Message):
    """SendBlocksResponse holds response from SendBlocks"""

    block_id: str = betterproto.string_field(1, group="result")
    """Block result"""

    error: "__model_v1__.Error" = betterproto.message_field(2, group="result")
    """Massa error"""


@dataclass(eq=False, repr=False)
class SendEndorsementsRequest(betterproto.Message):
    """SendEndorsementsRequest holds parameters to SendEndorsements"""

    endorsements: List[bytes] = betterproto.bytes_field(1)
    """Secure shared endorsements"""


@dataclass(eq=False, repr=False)
class SendEndorsementsResponse(betterproto.Message):
    """SendEndorsementsResponse holds response from SendEndorsements"""

    endorsement_ids: "__model_v1__.EndorsementIds" = betterproto.message_field(
        1, group="result"
    )
    """Endorsement result"""

    error: "__model_v1__.Error" = betterproto.message_field(2, group="result")
    """Massa error"""


@dataclass(eq=False, repr=False)
class SendOperationsRequest(betterproto.Message):
    """SendOperationsRequest holds parameters to SendOperations"""

    operations: List[bytes] = betterproto.bytes_field(1)
    """Secured shared operations"""


@dataclass(eq=False, repr=False)
class SendOperationsResponse(betterproto.Message):
    """SendOperationsResponse holds response from SendOperations"""

    operation_ids: "__model_v1__.OperationIds" = betterproto.message_field(
        1, group="result"
    )
    """Operation result"""

    error: "__model_v1__.Error" = betterproto.message_field(2, group="result")
    """Massa error"""


@dataclass(eq=False, repr=False)
class TransactionsThroughputRequest(betterproto.Message):
    """
    TransactionsThroughputRequest holds request for TransactionsThroughput
    """

    interval: Optional[int] = betterproto.message_field(
        1, wraps=betterproto.TYPE_UINT64
    )
    """Timer interval in seconds (Optional). Defaults to 10s"""


@dataclass(eq=False, repr=False)
class TransactionsThroughputResponse(betterproto.Message):
    """
    TransactionsThroughputResponse holds response from TransactionsThroughput
    """

    throughput: int = betterproto.uint32_field(1)
    """Transactions throughput per second"""


@dataclass(eq=False, repr=False)
class SearchBlocksRequest(betterproto.Message):
    """SearchBlocksRequest holds request for SearchBlocks"""

    filters: List["SearchBlocksFilter"] = betterproto.message_field(1)
    """Returns all the blocks that verify all the filters"""


@dataclass(eq=False, repr=False)
class SearchBlocksFilter(betterproto.Message):
    """SearchBlocks Filter"""

    block_ids: "__model_v1__.BlockIds" = betterproto.message_field(1, group="filter")
    """One of these block ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    slot_range: "__model_v1__.SlotRange" = betterproto.message_field(3, group="filter")
    """One of these slot ranges (inclusive)"""


@dataclass(eq=False, repr=False)
class SearchBlocksResponse(betterproto.Message):
    """SearchBlocksResponse holds response from SearchBlocks"""

    block_infos: List["__model_v1__.BlockInfo"] = betterproto.message_field(1)
    """Information about the blocks"""


@dataclass(eq=False, repr=False)
class SearchEndorsementsRequest(betterproto.Message):
    """SearchEndorsementsRequest holds request for SearchEndorsements"""

    filters: List["SearchEndorsementsFilter"] = betterproto.message_field(1)
    """
    Returns all the endorsements informations that verify all the filters
    """


@dataclass(eq=False, repr=False)
class SearchEndorsementsFilter(betterproto.Message):
    """SearchEndorsements Filter"""

    endorsement_ids: "__model_v1__.EndorsementIds" = betterproto.message_field(
        1, group="filter"
    )
    """One of these endorsement ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""

    block_ids: "__model_v1__.BlockIds" = betterproto.message_field(3, group="filter")
    """One of these block ids"""


@dataclass(eq=False, repr=False)
class SearchEndorsementsResponse(betterproto.Message):
    """SearchEndorsementsResponse holds response from SearchEndorsements"""

    endorsement_infos: List["__model_v1__.EndorsementInfo"] = betterproto.message_field(
        1
    )
    """Information about the endorsements"""


@dataclass(eq=False, repr=False)
class SearchOperationsRequest(betterproto.Message):
    """SearchOperationsRequest holds request for SearchOperations"""

    filters: List["SearchOperationsFilter"] = betterproto.message_field(1)
    """Returns all the operations that verify all the filters"""


@dataclass(eq=False, repr=False)
class SearchOperationsFilter(betterproto.Message):
    """SearchOperations Filter"""

    operation_ids: "__model_v1__.OperationIds" = betterproto.message_field(
        1, group="filter"
    )
    """One of the operation ids"""

    addresses: "__model_v1__.Addresses" = betterproto.message_field(2, group="filter")
    """One of these creator addresses"""


@dataclass(eq=False, repr=False)
class SearchOperationsResponse(betterproto.Message):
    """SearchOperationsResponse holds response from SearchOperations"""

    operation_infos: List["__model_v1__.OperationInfo"] = betterproto.message_field(1)
    """Information about the operations"""


@dataclass(eq=False, repr=False)
class AddToBootstrapBlacklistRequest(betterproto.Message):
    """
    AddToBootstrapBlacklistRequest holds the request for
    AddToBootstrapBlacklist
    """

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to add to bootstrap blacklist"""


@dataclass(eq=False, repr=False)
class AddToBootstrapBlacklistResponse(betterproto.Message):
    """
    AddToBootstrapBlacklistResponse holds the response from
    AddToBootstrapBlacklist
    """

    pass


@dataclass(eq=False, repr=False)
class AddToBootstrapWhitelistRequest(betterproto.Message):
    """
    AddToBootstrapWhitelistRequest holds the request for
    AddToBootstrapWhitelist
    """

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to add to bootstrap whitelist"""


@dataclass(eq=False, repr=False)
class AddToBootstrapWhitelistResponse(betterproto.Message):
    """
    AddToBootstrapWhitelistResponse holds the response from
    AddToBootstrapWhitelist
    """

    pass


@dataclass(eq=False, repr=False)
class AddToPeersWhitelistRequest(betterproto.Message):
    """AddToPeersWhitelistRequest holds the request for AddToPeersWhitelist"""

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to add to peers whitelist"""


@dataclass(eq=False, repr=False)
class AddToPeersWhitelistResponse(betterproto.Message):
    """
    AddToPeersWhitelistResponse holds the response from AddToPeersWhitelist
    """

    pass


@dataclass(eq=False, repr=False)
class AddStakingSecretKeysRequest(betterproto.Message):
    """
    AddStakingSecretKeysRequest holds the request for AddStakingSecretKeys
    """

    secret_keys: List[str] = betterproto.string_field(1)
    """Secret keys to add to wallet"""


@dataclass(eq=False, repr=False)
class AddStakingSecretKeysResponse(betterproto.Message):
    """
    AddStakingSecretKeysResponse holds the response from AddStakingSecretKeys
    """

    pass


@dataclass(eq=False, repr=False)
class AllowEveryoneToBootstrapRequest(betterproto.Message):
    """
    AllowEveryoneToBootstrapRequest holds the request for
    AllowEveryoneToBootstrap
    """

    pass


@dataclass(eq=False, repr=False)
class AllowEveryoneToBootstrapResponse(betterproto.Message):
    """
    AllowEveryoneToBootstrapResponse holds the response from
    AllowEveryoneToBootstrap
    """

    pass


@dataclass(eq=False, repr=False)
class GetBootstrapBlacklistRequest(betterproto.Message):
    """
    GetBootstrapBlacklistRequest holds the request for GetBootstrapBlacklist
    """

    pass


@dataclass(eq=False, repr=False)
class GetBootstrapBlacklistResponse(betterproto.Message):
    """
    GetBootstrapBlacklistResponse holds the response from GetBootstrapBlacklist
    """

    ips: List[str] = betterproto.string_field(1)
    """Bootstrap blacklisted IP addresses"""


@dataclass(eq=False, repr=False)
class GetBootstrapWhitelistRequest(betterproto.Message):
    """
    GetBootstrapWhitelistRequest holds the request for GetBootstrapWhitelist
    """

    pass


@dataclass(eq=False, repr=False)
class GetBootstrapWhitelistResponse(betterproto.Message):
    """
    GetBootstrapWhitelistResponse holds the response from GetBootstrapWhitelist
    """

    ips: List[str] = betterproto.string_field(1)
    """Bootstrap whitelisted IP addresses"""


@dataclass(eq=False, repr=False)
class GetMipStatusRequest(betterproto.Message):
    """GetMipStatusRequest holds request for GetMipStatus"""

    pass


@dataclass(eq=False, repr=False)
class GetMipStatusResponse(betterproto.Message):
    """GetMipStatusResponse holds response from GetMipStatus"""

    mipstatus_entries: List["__model_v1__.MipStatusEntry"] = betterproto.message_field(
        1
    )
    """(MipInfo - status id) entries"""


@dataclass(eq=False, repr=False)
class GetNodeStatusRequest(betterproto.Message):
    """GetNodeStatusRequest holds the request for GetNodeStatus"""

    pass


@dataclass(eq=False, repr=False)
class GetNodeStatusResponse(betterproto.Message):
    """GetNodeStatusResponse holds the response from GetNodeStatus"""

    status: "__model_v1__.NodeStatus" = betterproto.message_field(1)
    """Node status"""


@dataclass(eq=False, repr=False)
class GetPeersWhitelistRequest(betterproto.Message):
    """GetPeersWhitelistRequest holds the request for GetPeersWhitelist"""

    pass


@dataclass(eq=False, repr=False)
class GetPeersWhitelistResponse(betterproto.Message):
    """GetPeersWhitelistResponse holds the response from GetPeersWhitelist"""

    ips: List[str] = betterproto.string_field(1)
    """Whitelisted IP addresses"""


@dataclass(eq=False, repr=False)
class BanNodesByIdsRequest(betterproto.Message):
    """BanNodesByIdsRequest holds the request for BanNodesByIds"""

    node_ids: List[str] = betterproto.string_field(1)
    """Node ids to ban"""


@dataclass(eq=False, repr=False)
class BanNodesByIdsResponse(betterproto.Message):
    """BanNodesByIdsResponse holds the response from BanNodesByIds"""

    pass


@dataclass(eq=False, repr=False)
class BanNodesByIpsRequest(betterproto.Message):
    """BanNodesByIpsRequest holds the request for BanNodesByIps"""

    ips: List[str] = betterproto.string_field(1)
    """Node IP addresses to ban"""


@dataclass(eq=False, repr=False)
class BanNodesByIpsResponse(betterproto.Message):
    """BanNodesByIpsResponse holds the response from BanNodesByIps"""

    pass


@dataclass(eq=False, repr=False)
class RemoveFromBootstrapBlacklistRequest(betterproto.Message):
    """
    RemoveFromBootstrapBlacklistRequest holds the request for
    RemoveFromBootstrapBlacklist
    """

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to remove from bootstrap blacklist"""


@dataclass(eq=False, repr=False)
class RemoveFromBootstrapBlacklistResponse(betterproto.Message):
    """
    RemoveFromBootstrapBlacklistResponse holds the response from
    RemoveFromBootstrapBlacklist
    """

    pass


@dataclass(eq=False, repr=False)
class RemoveFromBootstrapWhitelistRequest(betterproto.Message):
    """
    RemoveFromBootstrapWhitelistRequest holds the request for
    RemoveFromBootstrapWhitelist
    """

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to remove from bootstrap whitelist"""


@dataclass(eq=False, repr=False)
class RemoveFromBootstrapWhitelistResponse(betterproto.Message):
    """
    RemoveFromBootstrapWhitelistResponse holds the response from
    RemoveFromBootstrapWhitelist
    """

    pass


@dataclass(eq=False, repr=False)
class RemoveFromPeersWhitelistRequest(betterproto.Message):
    """
    RemoveFromPeersWhitelistRequest holds the request for
    RemoveFromPeersWhitelist
    """

    ips: List[str] = betterproto.string_field(1)
    """IP addresses to remove from peers whitelist"""


@dataclass(eq=False, repr=False)
class RemoveFromPeersWhitelistResponse(betterproto.Message):
    """
    RemoveFromPeersWhitelistResponse holds the response from
    RemoveFromPeersWhitelist
    """

    pass


@dataclass(eq=False, repr=False)
class RemoveStakingAddressesRequest(betterproto.Message):
    """
    RemoveStakingAddressesRequest holds the request for RemoveStakingAddresses
    """

    addresses: List[str] = betterproto.string_field(1)
    """Addresses to remove from staking"""


@dataclass(eq=False, repr=False)
class RemoveStakingAddressesResponse(betterproto.Message):
    """
    RemoveStakingAddressesResponse holds the response from
    RemoveStakingAddresses
    """

    pass


@dataclass(eq=False, repr=False)
class SignMessagesRequest(betterproto.Message):
    """SignMessagesRequest holds the request for SignMessages"""

    messages: List[bytes] = betterproto.bytes_field(1)
    """Messages to sign in bytes"""


@dataclass(eq=False, repr=False)
class SignMessagesResponse(betterproto.Message):
    """SignMessagesResponse holds the response from SignMessages"""

    public_key: str = betterproto.string_field(1)
    """Public key that signed the message"""

    signatures: List[str] = betterproto.string_field(3)
    """Signatures"""


@dataclass(eq=False, repr=False)
class ShutdownGracefullyRequest(betterproto.Message):
    """ShutdownGracefullyRequest holds the request for ShutdownGracefully"""

    pass


@dataclass(eq=False, repr=False)
class ShutdownGracefullyResponse(betterproto.Message):
    """
    ShutdownGracefullyResponse holds the response from ShutdownGracefully
    """

    pass


@dataclass(eq=False, repr=False)
class UnbanNodesByIdsRequest(betterproto.Message):
    """UnbanNodesByIdsRequest holds the request for UnbanNodesByIds"""

    node_ids: List[str] = betterproto.string_field(1)
    """Node ids to unban"""


@dataclass(eq=False, repr=False)
class UnbanNodesByIdsResponse(betterproto.Message):
    """UnbanNodesByIdsResponse holds the response from UnbanNodesByIds"""

    pass


@dataclass(eq=False, repr=False)
class UnbanNodesByIpsRequest(betterproto.Message):
    """UnbanNodesByIpsRequest holds the request for UnbanNodesByIps"""

    ips: List[str] = betterproto.string_field(1)
    """Nodes IP addresses to unban"""


@dataclass(eq=False, repr=False)
class UnbanNodesByIpsResponse(betterproto.Message):
    """UnbanNodesByIpsResponse holds the response from UnbanNodesByIps"""

    pass


class PublicServiceStub(betterproto.ServiceStub):
    async def execute_read_only_call(
        self,
        execute_read_only_call_request: "ExecuteReadOnlyCallRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ExecuteReadOnlyCallResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/ExecuteReadOnlyCall",
            execute_read_only_call_request,
            ExecuteReadOnlyCallResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_blocks(
        self,
        get_blocks_request: "GetBlocksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBlocksResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetBlocks",
            get_blocks_request,
            GetBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_datastore_entries(
        self,
        get_datastore_entries_request: "GetDatastoreEntriesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetDatastoreEntriesResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetDatastoreEntries",
            get_datastore_entries_request,
            GetDatastoreEntriesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_endorsements(
        self,
        get_endorsements_request: "GetEndorsementsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetEndorsementsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetEndorsements",
            get_endorsements_request,
            GetEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_next_block_best_parents(
        self,
        get_next_block_best_parents_request: "GetNextBlockBestParentsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNextBlockBestParentsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetNextBlockBestParents",
            get_next_block_best_parents_request,
            GetNextBlockBestParentsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_operations(
        self,
        get_operations_request: "GetOperationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetOperationsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetOperations",
            get_operations_request,
            GetOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_sc_execution_events(
        self,
        get_sc_execution_events_request: "GetScExecutionEventsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetScExecutionEventsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetScExecutionEvents",
            get_sc_execution_events_request,
            GetScExecutionEventsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_selector_draws(
        self,
        get_selector_draws_request: "GetSelectorDrawsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetSelectorDrawsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetSelectorDraws",
            get_selector_draws_request,
            GetSelectorDrawsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_stakers(
        self,
        get_stakers_request: "GetStakersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStakersResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetStakers",
            get_stakers_request,
            GetStakersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_status(
        self,
        get_status_request: "GetStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetStatusResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetStatus",
            get_status_request,
            GetStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_transactions_throughput(
        self,
        get_transactions_throughput_request: "GetTransactionsThroughputRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetTransactionsThroughputResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/GetTransactionsThroughput",
            get_transactions_throughput_request,
            GetTransactionsThroughputResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_state(
        self,
        query_state_request: "QueryStateRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStateResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/QueryState",
            query_state_request,
            QueryStateResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_blocks(
        self,
        search_blocks_request: "SearchBlocksRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SearchBlocksResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/SearchBlocks",
            search_blocks_request,
            SearchBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_endorsements(
        self,
        search_endorsements_request: "SearchEndorsementsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SearchEndorsementsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/SearchEndorsements",
            search_endorsements_request,
            SearchEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def search_operations(
        self,
        search_operations_request: "SearchOperationsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SearchOperationsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PublicService/SearchOperations",
            search_operations_request,
            SearchOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def new_blocks(
        self,
        new_blocks_request_iterator: Union[
            AsyncIterable["NewBlocksRequest"], Iterable["NewBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/NewBlocks",
            new_blocks_request_iterator,
            NewBlocksRequest,
            NewBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_endorsements(
        self,
        new_endorsements_request_iterator: Union[
            AsyncIterable["NewEndorsementsRequest"], Iterable["NewEndorsementsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewEndorsementsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/NewEndorsements",
            new_endorsements_request_iterator,
            NewEndorsementsRequest,
            NewEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_filled_blocks(
        self,
        new_filled_blocks_request_iterator: Union[
            AsyncIterable["NewFilledBlocksRequest"], Iterable["NewFilledBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewFilledBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/NewFilledBlocks",
            new_filled_blocks_request_iterator,
            NewFilledBlocksRequest,
            NewFilledBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_operations(
        self,
        new_operations_request_iterator: Union[
            AsyncIterable["NewOperationsRequest"], Iterable["NewOperationsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewOperationsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/NewOperations",
            new_operations_request_iterator,
            NewOperationsRequest,
            NewOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def new_slot_execution_outputs(
        self,
        new_slot_execution_outputs_request_iterator: Union[
            AsyncIterable["NewSlotExecutionOutputsRequest"],
            Iterable["NewSlotExecutionOutputsRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["NewSlotExecutionOutputsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/NewSlotExecutionOutputs",
            new_slot_execution_outputs_request_iterator,
            NewSlotExecutionOutputsRequest,
            NewSlotExecutionOutputsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_blocks(
        self,
        send_blocks_request_iterator: Union[
            AsyncIterable["SendBlocksRequest"], Iterable["SendBlocksRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendBlocksResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/SendBlocks",
            send_blocks_request_iterator,
            SendBlocksRequest,
            SendBlocksResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_endorsements(
        self,
        send_endorsements_request_iterator: Union[
            AsyncIterable["SendEndorsementsRequest"],
            Iterable["SendEndorsementsRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendEndorsementsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/SendEndorsements",
            send_endorsements_request_iterator,
            SendEndorsementsRequest,
            SendEndorsementsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def send_operations(
        self,
        send_operations_request_iterator: Union[
            AsyncIterable["SendOperationsRequest"], Iterable["SendOperationsRequest"]
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["SendOperationsResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/SendOperations",
            send_operations_request_iterator,
            SendOperationsRequest,
            SendOperationsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response

    async def transactions_throughput(
        self,
        transactions_throughput_request_iterator: Union[
            AsyncIterable["TransactionsThroughputRequest"],
            Iterable["TransactionsThroughputRequest"],
        ],
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> AsyncIterator["TransactionsThroughputResponse"]:
        async for response in self._stream_stream(
            "/massa.api.v1.PublicService/TransactionsThroughput",
            transactions_throughput_request_iterator,
            TransactionsThroughputRequest,
            TransactionsThroughputResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        ):
            yield response


class PrivateServiceStub(betterproto.ServiceStub):
    async def add_to_bootstrap_blacklist(
        self,
        add_to_bootstrap_blacklist_request: "AddToBootstrapBlacklistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToBootstrapBlacklistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/AddToBootstrapBlacklist",
            add_to_bootstrap_blacklist_request,
            AddToBootstrapBlacklistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_bootstrap_whitelist(
        self,
        add_to_bootstrap_whitelist_request: "AddToBootstrapWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToBootstrapWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/AddToBootstrapWhitelist",
            add_to_bootstrap_whitelist_request,
            AddToBootstrapWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_to_peers_whitelist(
        self,
        add_to_peers_whitelist_request: "AddToPeersWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddToPeersWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/AddToPeersWhitelist",
            add_to_peers_whitelist_request,
            AddToPeersWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def add_staking_secret_keys(
        self,
        add_staking_secret_keys_request: "AddStakingSecretKeysRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AddStakingSecretKeysResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/AddStakingSecretKeys",
            add_staking_secret_keys_request,
            AddStakingSecretKeysResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def allow_everyone_to_bootstrap(
        self,
        allow_everyone_to_bootstrap_request: "AllowEveryoneToBootstrapRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AllowEveryoneToBootstrapResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/AllowEveryoneToBootstrap",
            allow_everyone_to_bootstrap_request,
            AllowEveryoneToBootstrapResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_bootstrap_blacklist(
        self,
        get_bootstrap_blacklist_request: "GetBootstrapBlacklistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBootstrapBlacklistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/GetBootstrapBlacklist",
            get_bootstrap_blacklist_request,
            GetBootstrapBlacklistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_bootstrap_whitelist(
        self,
        get_bootstrap_whitelist_request: "GetBootstrapWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetBootstrapWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/GetBootstrapWhitelist",
            get_bootstrap_whitelist_request,
            GetBootstrapWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_mip_status(
        self,
        get_mip_status_request: "GetMipStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetMipStatusResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/GetMipStatus",
            get_mip_status_request,
            GetMipStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_node_status(
        self,
        get_node_status_request: "GetNodeStatusRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetNodeStatusResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/GetNodeStatus",
            get_node_status_request,
            GetNodeStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_peers_whitelist(
        self,
        get_peers_whitelist_request: "GetPeersWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetPeersWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/GetPeersWhitelist",
            get_peers_whitelist_request,
            GetPeersWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ban_nodes_by_ids(
        self,
        ban_nodes_by_ids_request: "BanNodesByIdsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BanNodesByIdsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/BanNodesByIds",
            ban_nodes_by_ids_request,
            BanNodesByIdsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def ban_nodes_by_ips(
        self,
        ban_nodes_by_ips_request: "BanNodesByIpsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "BanNodesByIpsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/BanNodesByIps",
            ban_nodes_by_ips_request,
            BanNodesByIpsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_bootstrap_blacklist(
        self,
        remove_from_bootstrap_blacklist_request: "RemoveFromBootstrapBlacklistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromBootstrapBlacklistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/RemoveFromBootstrapBlacklist",
            remove_from_bootstrap_blacklist_request,
            RemoveFromBootstrapBlacklistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_bootstrap_whitelist(
        self,
        remove_from_bootstrap_whitelist_request: "RemoveFromBootstrapWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromBootstrapWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/RemoveFromBootstrapWhitelist",
            remove_from_bootstrap_whitelist_request,
            RemoveFromBootstrapWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_from_peers_whitelist(
        self,
        remove_from_peers_whitelist_request: "RemoveFromPeersWhitelistRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveFromPeersWhitelistResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/RemoveFromPeersWhitelist",
            remove_from_peers_whitelist_request,
            RemoveFromPeersWhitelistResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def remove_staking_addresses(
        self,
        remove_staking_addresses_request: "RemoveStakingAddressesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RemoveStakingAddressesResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/RemoveStakingAddresses",
            remove_staking_addresses_request,
            RemoveStakingAddressesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def sign_messages(
        self,
        sign_messages_request: "SignMessagesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "SignMessagesResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/SignMessages",
            sign_messages_request,
            SignMessagesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def shutdown_gracefully(
        self,
        shutdown_gracefully_request: "ShutdownGracefullyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ShutdownGracefullyResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/ShutdownGracefully",
            shutdown_gracefully_request,
            ShutdownGracefullyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unban_nodes_by_ids(
        self,
        unban_nodes_by_ids_request: "UnbanNodesByIdsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UnbanNodesByIdsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/UnbanNodesByIds",
            unban_nodes_by_ids_request,
            UnbanNodesByIdsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def unban_nodes_by_ips(
        self,
        unban_nodes_by_ips_request: "UnbanNodesByIpsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UnbanNodesByIpsResponse":
        return await self._unary_unary(
            "/massa.api.v1.PrivateService/UnbanNodesByIps",
            unban_nodes_by_ips_request,
            UnbanNodesByIpsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class PublicServiceBase(ServiceBase):
    async def execute_read_only_call(
        self, execute_read_only_call_request: "ExecuteReadOnlyCallRequest"
    ) -> "ExecuteReadOnlyCallResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_blocks(
        self, get_blocks_request: "GetBlocksRequest"
    ) -> "GetBlocksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_datastore_entries(
        self, get_datastore_entries_request: "GetDatastoreEntriesRequest"
    ) -> "GetDatastoreEntriesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_endorsements(
        self, get_endorsements_request: "GetEndorsementsRequest"
    ) -> "GetEndorsementsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_next_block_best_parents(
        self, get_next_block_best_parents_request: "GetNextBlockBestParentsRequest"
    ) -> "GetNextBlockBestParentsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_operations(
        self, get_operations_request: "GetOperationsRequest"
    ) -> "GetOperationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_sc_execution_events(
        self, get_sc_execution_events_request: "GetScExecutionEventsRequest"
    ) -> "GetScExecutionEventsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_selector_draws(
        self, get_selector_draws_request: "GetSelectorDrawsRequest"
    ) -> "GetSelectorDrawsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_stakers(
        self, get_stakers_request: "GetStakersRequest"
    ) -> "GetStakersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_status(
        self, get_status_request: "GetStatusRequest"
    ) -> "GetStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_transactions_throughput(
        self, get_transactions_throughput_request: "GetTransactionsThroughputRequest"
    ) -> "GetTransactionsThroughputResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_state(
        self, query_state_request: "QueryStateRequest"
    ) -> "QueryStateResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_blocks(
        self, search_blocks_request: "SearchBlocksRequest"
    ) -> "SearchBlocksResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_endorsements(
        self, search_endorsements_request: "SearchEndorsementsRequest"
    ) -> "SearchEndorsementsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def search_operations(
        self, search_operations_request: "SearchOperationsRequest"
    ) -> "SearchOperationsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def new_blocks(
        self, new_blocks_request_iterator: AsyncIterator["NewBlocksRequest"]
    ) -> AsyncIterator["NewBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield NewBlocksResponse()

    async def new_endorsements(
        self, new_endorsements_request_iterator: AsyncIterator["NewEndorsementsRequest"]
    ) -> AsyncIterator["NewEndorsementsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield NewEndorsementsResponse()

    async def new_filled_blocks(
        self,
        new_filled_blocks_request_iterator: AsyncIterator["NewFilledBlocksRequest"],
    ) -> AsyncIterator["NewFilledBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield NewFilledBlocksResponse()

    async def new_operations(
        self, new_operations_request_iterator: AsyncIterator["NewOperationsRequest"]
    ) -> AsyncIterator["NewOperationsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield NewOperationsResponse()

    async def new_slot_execution_outputs(
        self,
        new_slot_execution_outputs_request_iterator: AsyncIterator[
            "NewSlotExecutionOutputsRequest"
        ],
    ) -> AsyncIterator["NewSlotExecutionOutputsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield NewSlotExecutionOutputsResponse()

    async def send_blocks(
        self, send_blocks_request_iterator: AsyncIterator["SendBlocksRequest"]
    ) -> AsyncIterator["SendBlocksResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SendBlocksResponse()

    async def send_endorsements(
        self,
        send_endorsements_request_iterator: AsyncIterator["SendEndorsementsRequest"],
    ) -> AsyncIterator["SendEndorsementsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SendEndorsementsResponse()

    async def send_operations(
        self, send_operations_request_iterator: AsyncIterator["SendOperationsRequest"]
    ) -> AsyncIterator["SendOperationsResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield SendOperationsResponse()

    async def transactions_throughput(
        self,
        transactions_throughput_request_iterator: AsyncIterator[
            "TransactionsThroughputRequest"
        ],
    ) -> AsyncIterator["TransactionsThroughputResponse"]:
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)
        yield TransactionsThroughputResponse()

    async def __rpc_execute_read_only_call(
        self,
        stream: "grpclib.server.Stream[ExecuteReadOnlyCallRequest, ExecuteReadOnlyCallResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.execute_read_only_call(request)
        await stream.send_message(response)

    async def __rpc_get_blocks(
        self, stream: "grpclib.server.Stream[GetBlocksRequest, GetBlocksResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_blocks(request)
        await stream.send_message(response)

    async def __rpc_get_datastore_entries(
        self,
        stream: "grpclib.server.Stream[GetDatastoreEntriesRequest, GetDatastoreEntriesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_datastore_entries(request)
        await stream.send_message(response)

    async def __rpc_get_endorsements(
        self,
        stream: "grpclib.server.Stream[GetEndorsementsRequest, GetEndorsementsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_endorsements(request)
        await stream.send_message(response)

    async def __rpc_get_next_block_best_parents(
        self,
        stream: "grpclib.server.Stream[GetNextBlockBestParentsRequest, GetNextBlockBestParentsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_next_block_best_parents(request)
        await stream.send_message(response)

    async def __rpc_get_operations(
        self,
        stream: "grpclib.server.Stream[GetOperationsRequest, GetOperationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_operations(request)
        await stream.send_message(response)

    async def __rpc_get_sc_execution_events(
        self,
        stream: "grpclib.server.Stream[GetScExecutionEventsRequest, GetScExecutionEventsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_sc_execution_events(request)
        await stream.send_message(response)

    async def __rpc_get_selector_draws(
        self,
        stream: "grpclib.server.Stream[GetSelectorDrawsRequest, GetSelectorDrawsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_selector_draws(request)
        await stream.send_message(response)

    async def __rpc_get_stakers(
        self, stream: "grpclib.server.Stream[GetStakersRequest, GetStakersResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_stakers(request)
        await stream.send_message(response)

    async def __rpc_get_status(
        self, stream: "grpclib.server.Stream[GetStatusRequest, GetStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_status(request)
        await stream.send_message(response)

    async def __rpc_get_transactions_throughput(
        self,
        stream: "grpclib.server.Stream[GetTransactionsThroughputRequest, GetTransactionsThroughputResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_transactions_throughput(request)
        await stream.send_message(response)

    async def __rpc_query_state(
        self, stream: "grpclib.server.Stream[QueryStateRequest, QueryStateResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_state(request)
        await stream.send_message(response)

    async def __rpc_search_blocks(
        self, stream: "grpclib.server.Stream[SearchBlocksRequest, SearchBlocksResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_blocks(request)
        await stream.send_message(response)

    async def __rpc_search_endorsements(
        self,
        stream: "grpclib.server.Stream[SearchEndorsementsRequest, SearchEndorsementsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_endorsements(request)
        await stream.send_message(response)

    async def __rpc_search_operations(
        self,
        stream: "grpclib.server.Stream[SearchOperationsRequest, SearchOperationsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.search_operations(request)
        await stream.send_message(response)

    async def __rpc_new_blocks(
        self, stream: "grpclib.server.Stream[NewBlocksRequest, NewBlocksResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_blocks,
            stream,
            request,
        )

    async def __rpc_new_endorsements(
        self,
        stream: "grpclib.server.Stream[NewEndorsementsRequest, NewEndorsementsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_endorsements,
            stream,
            request,
        )

    async def __rpc_new_filled_blocks(
        self,
        stream: "grpclib.server.Stream[NewFilledBlocksRequest, NewFilledBlocksResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_filled_blocks,
            stream,
            request,
        )

    async def __rpc_new_operations(
        self,
        stream: "grpclib.server.Stream[NewOperationsRequest, NewOperationsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_operations,
            stream,
            request,
        )

    async def __rpc_new_slot_execution_outputs(
        self,
        stream: "grpclib.server.Stream[NewSlotExecutionOutputsRequest, NewSlotExecutionOutputsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.new_slot_execution_outputs,
            stream,
            request,
        )

    async def __rpc_send_blocks(
        self, stream: "grpclib.server.Stream[SendBlocksRequest, SendBlocksResponse]"
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_blocks,
            stream,
            request,
        )

    async def __rpc_send_endorsements(
        self,
        stream: "grpclib.server.Stream[SendEndorsementsRequest, SendEndorsementsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_endorsements,
            stream,
            request,
        )

    async def __rpc_send_operations(
        self,
        stream: "grpclib.server.Stream[SendOperationsRequest, SendOperationsResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.send_operations,
            stream,
            request,
        )

    async def __rpc_transactions_throughput(
        self,
        stream: "grpclib.server.Stream[TransactionsThroughputRequest, TransactionsThroughputResponse]",
    ) -> None:
        request = stream.__aiter__()
        await self._call_rpc_handler_server_stream(
            self.transactions_throughput,
            stream,
            request,
        )

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/massa.api.v1.PublicService/ExecuteReadOnlyCall": grpclib.const.Handler(
                self.__rpc_execute_read_only_call,
                grpclib.const.Cardinality.UNARY_UNARY,
                ExecuteReadOnlyCallRequest,
                ExecuteReadOnlyCallResponse,
            ),
            "/massa.api.v1.PublicService/GetBlocks": grpclib.const.Handler(
                self.__rpc_get_blocks,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBlocksRequest,
                GetBlocksResponse,
            ),
            "/massa.api.v1.PublicService/GetDatastoreEntries": grpclib.const.Handler(
                self.__rpc_get_datastore_entries,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetDatastoreEntriesRequest,
                GetDatastoreEntriesResponse,
            ),
            "/massa.api.v1.PublicService/GetEndorsements": grpclib.const.Handler(
                self.__rpc_get_endorsements,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetEndorsementsRequest,
                GetEndorsementsResponse,
            ),
            "/massa.api.v1.PublicService/GetNextBlockBestParents": grpclib.const.Handler(
                self.__rpc_get_next_block_best_parents,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNextBlockBestParentsRequest,
                GetNextBlockBestParentsResponse,
            ),
            "/massa.api.v1.PublicService/GetOperations": grpclib.const.Handler(
                self.__rpc_get_operations,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetOperationsRequest,
                GetOperationsResponse,
            ),
            "/massa.api.v1.PublicService/GetScExecutionEvents": grpclib.const.Handler(
                self.__rpc_get_sc_execution_events,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetScExecutionEventsRequest,
                GetScExecutionEventsResponse,
            ),
            "/massa.api.v1.PublicService/GetSelectorDraws": grpclib.const.Handler(
                self.__rpc_get_selector_draws,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetSelectorDrawsRequest,
                GetSelectorDrawsResponse,
            ),
            "/massa.api.v1.PublicService/GetStakers": grpclib.const.Handler(
                self.__rpc_get_stakers,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStakersRequest,
                GetStakersResponse,
            ),
            "/massa.api.v1.PublicService/GetStatus": grpclib.const.Handler(
                self.__rpc_get_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetStatusRequest,
                GetStatusResponse,
            ),
            "/massa.api.v1.PublicService/GetTransactionsThroughput": grpclib.const.Handler(
                self.__rpc_get_transactions_throughput,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetTransactionsThroughputRequest,
                GetTransactionsThroughputResponse,
            ),
            "/massa.api.v1.PublicService/QueryState": grpclib.const.Handler(
                self.__rpc_query_state,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStateRequest,
                QueryStateResponse,
            ),
            "/massa.api.v1.PublicService/SearchBlocks": grpclib.const.Handler(
                self.__rpc_search_blocks,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchBlocksRequest,
                SearchBlocksResponse,
            ),
            "/massa.api.v1.PublicService/SearchEndorsements": grpclib.const.Handler(
                self.__rpc_search_endorsements,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchEndorsementsRequest,
                SearchEndorsementsResponse,
            ),
            "/massa.api.v1.PublicService/SearchOperations": grpclib.const.Handler(
                self.__rpc_search_operations,
                grpclib.const.Cardinality.UNARY_UNARY,
                SearchOperationsRequest,
                SearchOperationsResponse,
            ),
            "/massa.api.v1.PublicService/NewBlocks": grpclib.const.Handler(
                self.__rpc_new_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewBlocksRequest,
                NewBlocksResponse,
            ),
            "/massa.api.v1.PublicService/NewEndorsements": grpclib.const.Handler(
                self.__rpc_new_endorsements,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewEndorsementsRequest,
                NewEndorsementsResponse,
            ),
            "/massa.api.v1.PublicService/NewFilledBlocks": grpclib.const.Handler(
                self.__rpc_new_filled_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewFilledBlocksRequest,
                NewFilledBlocksResponse,
            ),
            "/massa.api.v1.PublicService/NewOperations": grpclib.const.Handler(
                self.__rpc_new_operations,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewOperationsRequest,
                NewOperationsResponse,
            ),
            "/massa.api.v1.PublicService/NewSlotExecutionOutputs": grpclib.const.Handler(
                self.__rpc_new_slot_execution_outputs,
                grpclib.const.Cardinality.STREAM_STREAM,
                NewSlotExecutionOutputsRequest,
                NewSlotExecutionOutputsResponse,
            ),
            "/massa.api.v1.PublicService/SendBlocks": grpclib.const.Handler(
                self.__rpc_send_blocks,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendBlocksRequest,
                SendBlocksResponse,
            ),
            "/massa.api.v1.PublicService/SendEndorsements": grpclib.const.Handler(
                self.__rpc_send_endorsements,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendEndorsementsRequest,
                SendEndorsementsResponse,
            ),
            "/massa.api.v1.PublicService/SendOperations": grpclib.const.Handler(
                self.__rpc_send_operations,
                grpclib.const.Cardinality.STREAM_STREAM,
                SendOperationsRequest,
                SendOperationsResponse,
            ),
            "/massa.api.v1.PublicService/TransactionsThroughput": grpclib.const.Handler(
                self.__rpc_transactions_throughput,
                grpclib.const.Cardinality.STREAM_STREAM,
                TransactionsThroughputRequest,
                TransactionsThroughputResponse,
            ),
        }


class PrivateServiceBase(ServiceBase):
    async def add_to_bootstrap_blacklist(
        self, add_to_bootstrap_blacklist_request: "AddToBootstrapBlacklistRequest"
    ) -> "AddToBootstrapBlacklistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_bootstrap_whitelist(
        self, add_to_bootstrap_whitelist_request: "AddToBootstrapWhitelistRequest"
    ) -> "AddToBootstrapWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_to_peers_whitelist(
        self, add_to_peers_whitelist_request: "AddToPeersWhitelistRequest"
    ) -> "AddToPeersWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def add_staking_secret_keys(
        self, add_staking_secret_keys_request: "AddStakingSecretKeysRequest"
    ) -> "AddStakingSecretKeysResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def allow_everyone_to_bootstrap(
        self, allow_everyone_to_bootstrap_request: "AllowEveryoneToBootstrapRequest"
    ) -> "AllowEveryoneToBootstrapResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_bootstrap_blacklist(
        self, get_bootstrap_blacklist_request: "GetBootstrapBlacklistRequest"
    ) -> "GetBootstrapBlacklistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_bootstrap_whitelist(
        self, get_bootstrap_whitelist_request: "GetBootstrapWhitelistRequest"
    ) -> "GetBootstrapWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_mip_status(
        self, get_mip_status_request: "GetMipStatusRequest"
    ) -> "GetMipStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_node_status(
        self, get_node_status_request: "GetNodeStatusRequest"
    ) -> "GetNodeStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_peers_whitelist(
        self, get_peers_whitelist_request: "GetPeersWhitelistRequest"
    ) -> "GetPeersWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ban_nodes_by_ids(
        self, ban_nodes_by_ids_request: "BanNodesByIdsRequest"
    ) -> "BanNodesByIdsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def ban_nodes_by_ips(
        self, ban_nodes_by_ips_request: "BanNodesByIpsRequest"
    ) -> "BanNodesByIpsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_bootstrap_blacklist(
        self,
        remove_from_bootstrap_blacklist_request: "RemoveFromBootstrapBlacklistRequest",
    ) -> "RemoveFromBootstrapBlacklistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_bootstrap_whitelist(
        self,
        remove_from_bootstrap_whitelist_request: "RemoveFromBootstrapWhitelistRequest",
    ) -> "RemoveFromBootstrapWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_from_peers_whitelist(
        self, remove_from_peers_whitelist_request: "RemoveFromPeersWhitelistRequest"
    ) -> "RemoveFromPeersWhitelistResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def remove_staking_addresses(
        self, remove_staking_addresses_request: "RemoveStakingAddressesRequest"
    ) -> "RemoveStakingAddressesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def sign_messages(
        self, sign_messages_request: "SignMessagesRequest"
    ) -> "SignMessagesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def shutdown_gracefully(
        self, shutdown_gracefully_request: "ShutdownGracefullyRequest"
    ) -> "ShutdownGracefullyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unban_nodes_by_ids(
        self, unban_nodes_by_ids_request: "UnbanNodesByIdsRequest"
    ) -> "UnbanNodesByIdsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def unban_nodes_by_ips(
        self, unban_nodes_by_ips_request: "UnbanNodesByIpsRequest"
    ) -> "UnbanNodesByIpsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_add_to_bootstrap_blacklist(
        self,
        stream: "grpclib.server.Stream[AddToBootstrapBlacklistRequest, AddToBootstrapBlacklistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_bootstrap_blacklist(request)
        await stream.send_message(response)

    async def __rpc_add_to_bootstrap_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToBootstrapWhitelistRequest, AddToBootstrapWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_bootstrap_whitelist(request)
        await stream.send_message(response)

    async def __rpc_add_to_peers_whitelist(
        self,
        stream: "grpclib.server.Stream[AddToPeersWhitelistRequest, AddToPeersWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_to_peers_whitelist(request)
        await stream.send_message(response)

    async def __rpc_add_staking_secret_keys(
        self,
        stream: "grpclib.server.Stream[AddStakingSecretKeysRequest, AddStakingSecretKeysResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.add_staking_secret_keys(request)
        await stream.send_message(response)

    async def __rpc_allow_everyone_to_bootstrap(
        self,
        stream: "grpclib.server.Stream[AllowEveryoneToBootstrapRequest, AllowEveryoneToBootstrapResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.allow_everyone_to_bootstrap(request)
        await stream.send_message(response)

    async def __rpc_get_bootstrap_blacklist(
        self,
        stream: "grpclib.server.Stream[GetBootstrapBlacklistRequest, GetBootstrapBlacklistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_bootstrap_blacklist(request)
        await stream.send_message(response)

    async def __rpc_get_bootstrap_whitelist(
        self,
        stream: "grpclib.server.Stream[GetBootstrapWhitelistRequest, GetBootstrapWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_bootstrap_whitelist(request)
        await stream.send_message(response)

    async def __rpc_get_mip_status(
        self, stream: "grpclib.server.Stream[GetMipStatusRequest, GetMipStatusResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_mip_status(request)
        await stream.send_message(response)

    async def __rpc_get_node_status(
        self,
        stream: "grpclib.server.Stream[GetNodeStatusRequest, GetNodeStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_node_status(request)
        await stream.send_message(response)

    async def __rpc_get_peers_whitelist(
        self,
        stream: "grpclib.server.Stream[GetPeersWhitelistRequest, GetPeersWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_peers_whitelist(request)
        await stream.send_message(response)

    async def __rpc_ban_nodes_by_ids(
        self,
        stream: "grpclib.server.Stream[BanNodesByIdsRequest, BanNodesByIdsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ban_nodes_by_ids(request)
        await stream.send_message(response)

    async def __rpc_ban_nodes_by_ips(
        self,
        stream: "grpclib.server.Stream[BanNodesByIpsRequest, BanNodesByIpsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.ban_nodes_by_ips(request)
        await stream.send_message(response)

    async def __rpc_remove_from_bootstrap_blacklist(
        self,
        stream: "grpclib.server.Stream[RemoveFromBootstrapBlacklistRequest, RemoveFromBootstrapBlacklistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_bootstrap_blacklist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_bootstrap_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromBootstrapWhitelistRequest, RemoveFromBootstrapWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_bootstrap_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_from_peers_whitelist(
        self,
        stream: "grpclib.server.Stream[RemoveFromPeersWhitelistRequest, RemoveFromPeersWhitelistResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_from_peers_whitelist(request)
        await stream.send_message(response)

    async def __rpc_remove_staking_addresses(
        self,
        stream: "grpclib.server.Stream[RemoveStakingAddressesRequest, RemoveStakingAddressesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.remove_staking_addresses(request)
        await stream.send_message(response)

    async def __rpc_sign_messages(
        self, stream: "grpclib.server.Stream[SignMessagesRequest, SignMessagesResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.sign_messages(request)
        await stream.send_message(response)

    async def __rpc_shutdown_gracefully(
        self,
        stream: "grpclib.server.Stream[ShutdownGracefullyRequest, ShutdownGracefullyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.shutdown_gracefully(request)
        await stream.send_message(response)

    async def __rpc_unban_nodes_by_ids(
        self,
        stream: "grpclib.server.Stream[UnbanNodesByIdsRequest, UnbanNodesByIdsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.unban_nodes_by_ids(request)
        await stream.send_message(response)

    async def __rpc_unban_nodes_by_ips(
        self,
        stream: "grpclib.server.Stream[UnbanNodesByIpsRequest, UnbanNodesByIpsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.unban_nodes_by_ips(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/massa.api.v1.PrivateService/AddToBootstrapBlacklist": grpclib.const.Handler(
                self.__rpc_add_to_bootstrap_blacklist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToBootstrapBlacklistRequest,
                AddToBootstrapBlacklistResponse,
            ),
            "/massa.api.v1.PrivateService/AddToBootstrapWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_bootstrap_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToBootstrapWhitelistRequest,
                AddToBootstrapWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/AddToPeersWhitelist": grpclib.const.Handler(
                self.__rpc_add_to_peers_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddToPeersWhitelistRequest,
                AddToPeersWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/AddStakingSecretKeys": grpclib.const.Handler(
                self.__rpc_add_staking_secret_keys,
                grpclib.const.Cardinality.UNARY_UNARY,
                AddStakingSecretKeysRequest,
                AddStakingSecretKeysResponse,
            ),
            "/massa.api.v1.PrivateService/AllowEveryoneToBootstrap": grpclib.const.Handler(
                self.__rpc_allow_everyone_to_bootstrap,
                grpclib.const.Cardinality.UNARY_UNARY,
                AllowEveryoneToBootstrapRequest,
                AllowEveryoneToBootstrapResponse,
            ),
            "/massa.api.v1.PrivateService/GetBootstrapBlacklist": grpclib.const.Handler(
                self.__rpc_get_bootstrap_blacklist,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBootstrapBlacklistRequest,
                GetBootstrapBlacklistResponse,
            ),
            "/massa.api.v1.PrivateService/GetBootstrapWhitelist": grpclib.const.Handler(
                self.__rpc_get_bootstrap_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetBootstrapWhitelistRequest,
                GetBootstrapWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/GetMipStatus": grpclib.const.Handler(
                self.__rpc_get_mip_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetMipStatusRequest,
                GetMipStatusResponse,
            ),
            "/massa.api.v1.PrivateService/GetNodeStatus": grpclib.const.Handler(
                self.__rpc_get_node_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetNodeStatusRequest,
                GetNodeStatusResponse,
            ),
            "/massa.api.v1.PrivateService/GetPeersWhitelist": grpclib.const.Handler(
                self.__rpc_get_peers_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetPeersWhitelistRequest,
                GetPeersWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/BanNodesByIds": grpclib.const.Handler(
                self.__rpc_ban_nodes_by_ids,
                grpclib.const.Cardinality.UNARY_UNARY,
                BanNodesByIdsRequest,
                BanNodesByIdsResponse,
            ),
            "/massa.api.v1.PrivateService/BanNodesByIps": grpclib.const.Handler(
                self.__rpc_ban_nodes_by_ips,
                grpclib.const.Cardinality.UNARY_UNARY,
                BanNodesByIpsRequest,
                BanNodesByIpsResponse,
            ),
            "/massa.api.v1.PrivateService/RemoveFromBootstrapBlacklist": grpclib.const.Handler(
                self.__rpc_remove_from_bootstrap_blacklist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromBootstrapBlacklistRequest,
                RemoveFromBootstrapBlacklistResponse,
            ),
            "/massa.api.v1.PrivateService/RemoveFromBootstrapWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_bootstrap_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromBootstrapWhitelistRequest,
                RemoveFromBootstrapWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/RemoveFromPeersWhitelist": grpclib.const.Handler(
                self.__rpc_remove_from_peers_whitelist,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveFromPeersWhitelistRequest,
                RemoveFromPeersWhitelistResponse,
            ),
            "/massa.api.v1.PrivateService/RemoveStakingAddresses": grpclib.const.Handler(
                self.__rpc_remove_staking_addresses,
                grpclib.const.Cardinality.UNARY_UNARY,
                RemoveStakingAddressesRequest,
                RemoveStakingAddressesResponse,
            ),
            "/massa.api.v1.PrivateService/SignMessages": grpclib.const.Handler(
                self.__rpc_sign_messages,
                grpclib.const.Cardinality.UNARY_UNARY,
                SignMessagesRequest,
                SignMessagesResponse,
            ),
            "/massa.api.v1.PrivateService/ShutdownGracefully": grpclib.const.Handler(
                self.__rpc_shutdown_gracefully,
                grpclib.const.Cardinality.UNARY_UNARY,
                ShutdownGracefullyRequest,
                ShutdownGracefullyResponse,
            ),
            "/massa.api.v1.PrivateService/UnbanNodesByIds": grpclib.const.Handler(
                self.__rpc_unban_nodes_by_ids,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnbanNodesByIdsRequest,
                UnbanNodesByIdsResponse,
            ),
            "/massa.api.v1.PrivateService/UnbanNodesByIps": grpclib.const.Handler(
                self.__rpc_unban_nodes_by_ips,
                grpclib.const.Cardinality.UNARY_UNARY,
                UnbanNodesByIpsRequest,
                UnbanNodesByIpsResponse,
            ),
        }
